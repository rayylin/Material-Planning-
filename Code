# Load packages
import pandas as pd
import networkx as nx
import numpy as np
import matplotlib.pyplot as plt
import pylab

# Read data
df = pd.read_csv(r"C:\Users\User\Downloads\data3.csv")

# Visualize data with directed graph
dic = {}
for i in range(df.shape[0]):
    if df.loc[i,'pr'] != "-":
        dic[df.loc[i,"ac"]] = [df.loc[i,"pr"], df.loc[i,"du"]]
#print(dic.items())

G = nx.DiGraph()
for i in dic.items():
    for j in i[1][0]:
        G.add_edges_from([(j,i[0])], weight = 1)

pos = nx.spring_layout(G, scale =5, iterations = 5000, dim = 2)
nx.draw_networkx_labels(G, pos)
nx.draw(G, pos, node_size=700)
plt.tight_layout()
plt.show()


# BFS
start = []
    graph = []
    atts = []
    path = []
    new = []
    st = ""
    last = data.iloc[-1, 0]
    last = chr(ord(last)+1)
    # -------------------------------------------
    for j in range(len(data)):
        for k in range(len(data.iloc[j, 1])):
            if data.iloc[j, 1][k] != '-':
                new.append(data.iloc[j, 1][k])
    # -------------------------------------------
    for j in range(len(data)):
        if not data.iloc[j, 0] in new:
            st = st+data.iloc[j, 0]
    # ------------------------------------------
    if data.shape[1] == 3:
        df = pd.DataFrame([[last, st, 0]], columns=["ac", "pr", "du"])
    else:
        df = pd.DataFrame([[last, st, 0, 0, 0]], columns=[
                          "ac", "pr", "b", "m", "a"])
    data = data.append(df)
    for i in range(len(data)):
        graph.append([])
        atts.append({})
    for j in range(len(data)):
        atts[j]["Name"] = data.iloc[j, 0]
        if data.shape[1] == 3:
            atts[j]["DU"] = data.iloc[j, 2]
        else:
            atts[j]["DU"] = (data.iloc[j, 4] + 4 *
                             data.iloc[j, 3] + data.iloc[j, 2]) / 6
        if(data.iloc[j, 1] == "-"):
            start.append(ord(data.iloc[j, 0])-65)
            continue
        for k in range(len(data.iloc[j, 1])):
            graph[ord(data.iloc[j, 1][k]) -
                  65].append(ord(data.iloc[j, 0])-65)

    level = [None] * (len(graph))

    def BFS(s, graph):
        visited = [False] * (len(graph))
        queue = []
        for i in s:
            queue.append(i)
            level[i] = 0
            visited[i] = True
        while queue:
            s = queue.pop(0)
            path.append(s)
            for i in graph[s]:
                if visited[i] == False:
                    queue.append(i)
                    level[i] = level[s] + 1
                    visited[i] = True
                else:
                    level[i] = max(level[s]+1, level[i])
    BFS(start, graph)

    levels = [None] * len(path)
    for i in range(len(path)):
        levels[i] = level[path[i]]
    path = [x for y, x in sorted(zip(levels, path))]
    print()
    print("Path")
    for i in path:
        print(str(chr(i+65)), end=' ')
    for s in path:
        # print(str(chr(s+65)), " ", level[s])
        # -------------Forward--------------------
        if(data.iloc[s, 1] == "-"):
            atts[s]["ES"] = 0
        else:
            ls = []
            for k in range(len(data.iloc[s, 1])):
                ls.append(atts[ord(data.iloc[s, 1][k]) - 65]["EF"])
            atts[s]["ES"] = max(ls)
        atts[s]["EF"] = atts[s]["DU"] + atts[s]["ES"]
        # ---------------------------------

    for i in range(len(graph)):
        if(graph[i] == []):
            atts[i]["LF"] = atts[i]["EF"]
            atts[i]["LS"] = atts[i]["ES"]
    print()
    print("------------------------")
    # --------------------backward
    path.reverse()
    for i in path:
        if(data.iloc[i, 1] != "-"):
            for k in range(len(data.iloc[i, 1])):
                if "LF" in atts[ord(data.iloc[i, 1][k]) - 65].keys():
                    atts[ord(data.iloc[i, 1][k]) - 65]["LF"] = min(atts[i]
                                                                   ["LS"], atts[ord(data.iloc[i, 1][k]) - 65]["LF"])
                else:
                    atts[ord(data.iloc[i, 1][k]) -
                         65]["LF"] = atts[i]["LS"]
                atts[ord(data.iloc[i, 1][k]) - 65]["LS"] = atts[ord(data.iloc[i, 1]
                                                                    [k]) - 65]["LF"] - atts[ord(data.iloc[i, 1][k]) - 65]["DU"]
        atts[i]["SK"] = atts[i]["LF"] - atts[i]["EF"]
    # ----------------------------------------
    atts[-1]["Name"] = "End"
    dic = {}
    Name = []
    DU = []
    ES = []
    EF = []
    LF = []
    LS = []
    SK = []
    for j in range(len(graph)):
#         print(atts[j])
        Name.append(atts[j]["Name"])
        DU.append(atts[j]["DU"])
        ES.append(atts[j]["ES"])
        EF.append(atts[j]["EF"])
        LF.append(atts[j]["LF"])
        LS.append(atts[j]["LS"])
        SK.append(atts[j]["SK"])
    dic["Name"] = Name
    dic["ES"] = ES
    dic["EF"] = EF
    dic["LF"] = LF
    dic["LS"] = LS
    dic["SK"] = SK
    df = pd.DataFrame(dic)
    print(df)
    df.to_csv(r"C:\Users\User\Downloads\data12_result.csv")
